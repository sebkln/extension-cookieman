name: Tests

on: [push, pull_request]

jobs:
    tests:
        runs-on: ubuntu-18.04
        strategy:
            matrix:
                php-version: [7.3]
                theme: [bootstrap3-banner, bootstrap3-modal, bootstrap4-modal, customtheme]
        steps:
            -   uses: actions/checkout@v1
            -   run: echo "::set-env name=DEBIAN_FRONTEND::noninteractive"
            # update docker
            -   run: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            -   run: sudo -E add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            -   run: sudo -E apt-get update
            -   run: sudo -E apt-get -y -o Dpkg::Options::="--force-confnew" install docker-ce
            # install linuxbrew
            -   uses: actions/cache@v1
                id: cache-linuxbrew
                with:
                    path: /home/linuxbrew
                    key: ${{ runner.os }}-linuxbrew
                    restore-keys: |
                        ${{ runner.os }}-linuxbrew-
            -   run: sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"
                if: steps.cache-linuxbrew.outputs.cache-hit != 'true'
            -   run: echo "::add-path::/home/linuxbrew/.linuxbrew/bin"
            # install ddev + docker-compose
            -   run: brew tap drud/ddev && brew install ddev docker-compose
                if: steps.cache-linuxbrew.outputs.cache-hit != 'true'
            -   run: ddev config global --instrumentation-opt-in=false
            -   run: ddev config global --omit-containers=dba,ddev-ssh-agent
            # cache
            -   name: Get Composer Cache Directory
                id: composer-cache
                run: |
                    echo "::set-output name=dir::$(composer config cache-files-dir)"
            -   uses: actions/cache@v1
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
                    restore-keys: |
                        ${{ runner.os }}-composer-
            -   uses: actions/cache@v1
                with:
                    path: /var/lib/docker
                    key: ${{ runner.os }}-docker
                    restore-keys: |
                        ${{ runner.os }}-docker-
            -   uses: actions/cache@v1
                with:
                    path: Build/node_modules
                    key: ${{ runner.os }}-node-${{ hashFiles('Build/package.json') }}
                    restore-keys: |
                        ${{ runner.os }}-node-
            # Set PHP version
            -   run: |
                    sed -i -e 's/^php_version:.*/php_version: ${{ matrix.php-version }}/g' .ddev/config.yaml
            # Start ddev
            -   run: ddev start || exit 0
            # see https://stackoverflow.com/questions/58934735/using-ddev-in-github-actions-workflows/58943183
            -   run: docker cp .ddev/patches/ddev-router/nginx.tmpl ddev-router:/app/nginx.tmpl
            -   run: ddev start
            # Setup tests
            -   run: ddev composer cookieman:${{ matrix.theme }}
            # we want Clover coverage
            -   run: ddev exec enable_xdebug
            # Run tests
            -   run: ddev composer cookieman:test
            # Save acceptance reports
            -   uses: actions/upload-artifact@master
                with:
                    name: acceptance-reports
                    path: Build/AcceptanceReports
            # Push to coveralls
            # currently errors: source_files must be set
#            -   run: |
#                    COVERALLS_REPO_TOKEN=${{ secrets.COVERALLS_REPO_TOKEN }} \
#                        .build/bin/php-coveralls \
#                        --root_dir=. --env=prod --verbose
